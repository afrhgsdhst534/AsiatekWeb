// FILE: server/index.ts (Add startup check for prerendered index.html content)
// Replace the ENTIRE content of your existing server/index.ts with this.

import express, { type Request, Response, NextFunction } from "express";
import http from "http";
import path, { join } from "path"; // Added 'join' for clarity
import fs, { realpathSync } from "fs"; // <-- Import realpathSync and fs
import { fileURLToPath } from "url";
import { registerRoutes } from "./routes.js";
import { createSeoMiddleware } from "./middleware/seo-middleware.js";

// --- Calculate project root and public path robustly ---
const projectRoot = realpathSync(process.cwd());
const publicPath = join(projectRoot, "dist", "public");
console.log(`[Server Init] Project Root (resolved): ${projectRoot}`);
console.log(`[Server Init] Public path calculated as: ${publicPath}`);
// --- End path calculation ---

// --- START: Prerendered File Check ---
const checkIndexPath = join(publicPath, "index.html");
let checkFileContent = "!!! PRERENDERED FILE CHECK FAILED !!!";
try {
  if (fs.existsSync(checkIndexPath)) {
    // Read just the first few bytes to check if it looks like HTML / has meta tags
    const buffer = fs.readFileSync(checkIndexPath, {
      encoding: "utf8",
      flag: "r",
    });
    // Look for a tag generated by react-helmet-async or your Seo component
    if (buffer.includes('<meta property="og:title"')) {
      checkFileContent = "Prerendered index.html seems OK (found og:title)";
    } else if (buffer.includes('<title data-rh="true">')) {
      checkFileContent = "Prerendered index.html seems OK (found helmet title)";
    } else if (buffer.length > 500) {
      checkFileContent = `Prerendered index.html exists but content check inconclusive (Length: ${buffer.length})`;
    } else {
      checkFileContent = `Prerendered index.html exists but seems too short or content mismatch (Length: ${buffer.length})`;
    }
  } else {
    checkFileContent = `Prerendered index.html NOT FOUND at ${checkIndexPath}`;
  }
} catch (err: any) {
  checkFileContent = `Error checking prerendered index.html: ${err.message}`;
}
console.log(`[Server Init Prerender Check] Status: ${checkFileContent}`);
// --- END: Prerendered File Check ---

const app = express();
const server = http.createServer(app);

// --- Standard Middleware ---
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// --- Request Logging ---
app.use((req, res, next) => {
  const start = Date.now();
  res.on("finish", () => {
    const duration = Date.now() - start;
    console.log(
      `${req.method} ${req.protocol}://${req.get("host")}${req.originalUrl} ${res.statusCode} ${duration}ms`,
    );
  });
  next();
});

// --- WWW to NON-WWW Redirect ---
app.set("trust proxy", 1);
app.use((req: Request, res: Response, next: NextFunction) => {
  if (req.headers.host && req.headers.host.startsWith("www.")) {
    const newHost = req.headers.host.slice(4);
    const nonWwwUrl = `https://${newHost}${req.originalUrl}`;
    console.log(
      `[Redirect] Redirecting www -> non-www: ${req.headers.host}${req.originalUrl} -> ${nonWwwUrl}`,
    );
    return res.redirect(301, nonWwwUrl);
  }
  next();
});

// --- Register API Routes ---
await registerRoutes(app, server);

// --- SEO Prerendering Middleware ---
const seoMiddlewareInstance = createSeoMiddleware(publicPath);
app.use(seoMiddlewareInstance);

// --- Production Static File Serving ---
const assetsPath = join(publicPath, "assets");

console.log(`Serving assets from: ${assetsPath} at /assets`);
app.use(
  "/assets",
  express.static(assetsPath, {
    /* options */
  }),
);

console.log(`Serving other static files from: ${publicPath}`);
app.use(express.static(publicPath, { index: false }));

// --- SPA Fallback ---
app.get("*", (req, res, next) => {
  if (path.extname(req.path)) {
    // console.log(`[SPA Fallback] Ignoring path with extension: ${req.path}`);
    return next();
  }
  // console.log(`[SPA Fallback] Attempting to serve index.html for path: ${req.path}`);
  const indexPath = join(publicPath, "index.html");
  if (!fs.existsSync(indexPath)) {
    console.error(`[SPA Fallback] SPA index.html not found at: ${indexPath}`);
    return res.status(500).send("Application entry point not found.");
  }
  res.sendFile(indexPath, (err) => {
    if (err) {
      console.error(
        `[SPA Fallback] Error sending SPA index.html: ${err.message}`,
      );
      if (!res.headersSent) {
        try {
          res.status(500).send("Error serving application.");
        } catch (e) {}
      }
    } else {
      // console.log(`[SPA Fallback] Successfully sent index.html for path: ${req.path}`);
    }
  });
});

// --- Basic 404 Handler ---
app.use((req, res, next) => {
  if (!res.headersSent) {
    console.warn(
      `[404 Handler] Request reached end of middleware: ${req.method} ${req.originalUrl}`,
    );
    res.status(404).send("Not Found");
  } else {
    console.warn(
      `[404 Handler] Headers already sent for ${req.method} ${req.originalUrl}, cannot send 404.`,
    );
    res.end();
  }
});

// --- Error Handling Middleware ---
app.use((err: any, req: Request, res: Response, next: NextFunction) => {
  console.error("[Error Handler] Unhandled Error:", err.stack || err);
  const status = err.status || err.statusCode || 500;
  const message = err.message || "Internal Server Error";
  if (!res.headersSent) {
    res.status(status).json({ error: { message, status } });
  } else {
    console.error(
      "[Error Handler] Headers already sent in error handler, cannot send JSON response.",
    );
    res.end();
  }
});

// --- Start Server ---
const port = process.env.PORT || 5000;
const host = "0.0.0.0";
server.listen(port, host, () => {
  console.log(`ðŸš€ Server listening on http://${host}:${port}`);
});
